<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hello world</title>
    <url>/2021/06/16/hello-world/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>6.824 lab1 MapReduce</title>
    <url>/2021/07/19/6-824-lab1-MapReduce/</url>
    <content><![CDATA[<h1 id="论文实现"><a href="#论文实现" class="headerlink" title="论文实现"></a>论文实现</h1><p><img src="https://i.loli.net/2021/07/18/qE9BlI63GyvCn45.png" alt="image.png"></p>
<p>看这个流程就基本明白了，</p>
<ol>
<li>每一个worker（master worker 特殊一点）都有相应的program，</li>
<li>master分配相应的task（map or reduce）给各个worker</li>
<li>input被分成多个splits到map worker上input splits被map function处理（给每一个input中的data加上key，形成intermediate key&#x2F;value pairs）</li>
<li>intermediate key&#x2F;value pairs（in memory）被periodically写入本地磁盘，这个pair的位置就会返回给master，然后master负责转发这些位置给reduce worker</li>
<li>reduce worker得知后，就使用<code>rpc</code>读取map worker磁盘中的数据（intermediate key&#x2F;value pairs），然后根据key对pairs进行排序，然后将key相同的聚合。（也就是现在的数据，每一个key有着一系列的values）</li>
<li>迭代数据，将key相同的输入reduce function，输出被添加到输出文件中</li>
<li>所有计算完成，master返回给user code</li>
</ol>
<p>注意：之后的output files一般并不需要合并，通常作为下一个<code>MapReduce</code>程序的输出，或者其他具有读取分布式文件能力的程序。</p>
<p>简洁版：<strong>map负责将input分类，reduce负责处理每一类数据</strong>，OVER。</p>
<h1 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h1><h2 id="0-github地址"><a href="#0-github地址" class="headerlink" title="0. github地址"></a>0. <a href="https://github.com/TYTaO/have-a-try-824">github地址</a></h2><h2 id="1-实现master与wroker的rpc通信"><a href="#1-实现master与wroker的rpc通信" class="headerlink" title="1. 实现master与wroker的rpc通信"></a>1. 实现master与wroker的rpc通信</h2><p>通过单独建一个包，用rpc.go规定两者之间的数据结构（待更优雅的解决方式）</p>
<p>worker需要使用rpc call两次</p>
<ul>
<li>一次拿任务</li>
<li>一次告诉master任务执行完毕</li>
</ul>
<h2 id="2-实现超时问题（解决worker挂掉的情况）"><a href="#2-实现超时问题（解决worker挂掉的情况）" class="headerlink" title="2. 实现超时问题（解决worker挂掉的情况）"></a>2. 实现超时问题（解决worker挂掉的情况）</h2><h4 id="遇见一个range问题"><a href="#遇见一个range问题" class="headerlink" title="遇见一个range问题"></a>遇见一个range问题</h4><p>range 数组时，</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 分发任务</span></span><br><span class="line"><span class="keyword">for</span> i, task := <span class="keyword">range</span> m.tasks &#123;  <span class="comment">// 这里m.tasks[i]是一个副本，而不是指向m.tasks[i]的指针，也就是对task的改动</span></span><br><span class="line"><span class="comment">// 不能影响m.tasks[i]</span></span><br><span class="line">    <span class="keyword">if</span> m.tasks[i].state == GENERATED &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;Distribute a task %d\n&quot;</span>, m.tasks[i].id)</span><br><span class="line">        reply.T = Task&#123;Id: m.tasks[i].id&#125;</span><br><span class="line">        m.tasks[i].state = DISTRIBUTED</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="全局变量问题"><a href="#全局变量问题" class="headerlink" title="全局变量问题"></a>全局变量问题</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> m *Master</span><br><span class="line"><span class="keyword">var</span> chans []<span class="keyword">chan</span> <span class="type">bool</span>  <span class="comment">// 用来传输任务已完成</span></span><br><span class="line"><span class="comment">// 通过rpc 给worker发任务</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    m = MakeMaster(<span class="number">10</span>) <span class="comment">// m := MakeMaster(10) 的话，m就不是全局变量了，</span></span><br><span class="line">	chans = <span class="built_in">make</span>([]<span class="keyword">chan</span> <span class="type">bool</span>, <span class="number">10</span>)</span><br><span class="line">	<span class="keyword">for</span> m.Done() == <span class="literal">false</span> &#123;</span><br><span class="line">		time.Sleep(<span class="number">2</span> * time.Second)</span><br><span class="line">	&#125;</span><br><span class="line">	time.Sleep(time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-实现不同任务的分发与协作"><a href="#3-实现不同任务的分发与协作" class="headerlink" title="3. 实现不同任务的分发与协作"></a>3. 实现不同任务的分发与协作</h2><blockquote>
<p>两个task，A，B。B依赖于A</p>
</blockquote>
<h4 id="分发"><a href="#分发" class="headerlink" title="分发"></a>分发</h4><h4 id="协作"><a href="#协作" class="headerlink" title="协作"></a>协作</h4><h4 id="实现具体的map-reduce"><a href="#实现具体的map-reduce" class="headerlink" title="实现具体的map reduce"></a>实现具体的map reduce</h4><h2 id="4-实现固定Reduce的输出文件数量"><a href="#4-实现固定Reduce的输出文件数量" class="headerlink" title="4. 实现固定Reduce的输出文件数量"></a>4. 实现固定Reduce的输出文件数量</h2><h4 id="临时文件"><a href="#临时文件" class="headerlink" title="临时文件"></a>临时文件</h4><blockquote>
<p>ensure that nobody observes partially written files in the presence of crashes， use <code>ioutil.TempFile</code> to create a temporary file and <code>os.Rename</code> to atomically rename it.</p>
</blockquote>
<h4 id="需要实现不同reduce-task对相对task-id结果的一个融合"><a href="#需要实现不同reduce-task对相对task-id结果的一个融合" class="headerlink" title="需要实现不同reduce task对相对task id结果的一个融合"></a>需要实现不同reduce task对相对task id结果的一个融合</h4><h4 id="ihash"><a href="#ihash" class="headerlink" title="ihash"></a>ihash</h4><p>其是对key（：word）进行hash，所以word相同的会到同一个reduce中。得大改代码了。。</p>
<p>map task输出 多个<code>mr-X-Y</code>, where X is the Map task number, and Y is the reduce task number.</p>
<h4 id="Workers-will-sometimes-need-to-wait-e-g-reduces-can’t-start-until-the-last-map-has-finished"><a href="#Workers-will-sometimes-need-to-wait-e-g-reduces-can’t-start-until-the-last-map-has-finished" class="headerlink" title="Workers will sometimes need to wait, e.g. reduces can’t start until the last map has finished."></a>Workers will sometimes need to wait, e.g. reduces can’t start until the last map has finished.</h4><p>说明reduce任务不能先执行，之前一直纠结于让reduce和map一起执行，然后reduce中间结果的问题。。。</p>
<blockquote>
<p>一个map task finished后，保存其生成的中间文件（存入m.reduceTaskFiles）。等到所有map结束后再生成reduce task</p>
</blockquote>
<h4 id="遇到一个占有锁不放（条件不满足），而另一个是来解决问题的，也进不去锁"><a href="#遇到一个占有锁不放（条件不满足），而另一个是来解决问题的，也进不去锁" class="headerlink" title="遇到一个占有锁不放（条件不满足），而另一个是来解决问题的，也进不去锁"></a>遇到一个占有锁不放（条件不满足），而另一个是来解决问题的，也进不去锁</h4><h4 id="得在返回之前释放锁鸭！！！！"><a href="#得在返回之前释放锁鸭！！！！" class="headerlink" title="得在返回之前释放锁鸭！！！！"></a>得在返回之前释放锁鸭！！！！</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">m.mtx.Unlock()</span><br><span class="line"><span class="keyword">if</span> hasDistribute &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// m.mtx.Unlock()   // ×</span></span><br></pre></td></tr></table></figure>

<h2 id="5-map并行测试不通过"><a href="#5-map并行测试不通过" class="headerlink" title="5. map并行测试不通过"></a>5. map并行测试不通过</h2><h4 id="一直timeout"><a href="#一直timeout" class="headerlink" title="一直timeout"></a>一直timeout</h4><p>mtiming的map相当废时间，每执行一次要1s，10个nReduce就是10s            </p>
<blockquote>
<p>先对整体执行一次mapf，之后对mapf的结果进行分段，而不是先分段。</p>
</blockquote>
<h4 id="执行20次mapf，让test误以为是20个并行"><a href="#执行20次mapf，让test误以为是20个并行" class="headerlink" title="执行20次mapf，让test误以为是20个并行"></a>执行20次mapf，让test误以为是20个并行</h4><blockquote>
<p>先对整体执行一次mapf，之后对mapf的结果进行分段，而不是先分段。</p>
</blockquote>
<h2 id="6-crash-test不通过"><a href="#6-crash-test不通过" class="headerlink" title="6. crash test不通过"></a>6. crash test不通过</h2><p>我每次map task会调用10次mapf，而test设置的每次mapf都会有几率crash，所以得接着进行map，不能每次从头开始？</p>
<p>map时间太长了，应该是我写的有问题。。</p>
<h4 id="两个问题"><a href="#两个问题" class="headerlink" title="两个问题"></a>两个问题</h4><ul>
<li>一次map task 10 次 crash机会</li>
<li>map时间过长，容易超时</li>
</ul>
<blockquote>
<p>先对整体执行一次mapf，之后对mapf的结果进行分段，而不是先分段。</p>
</blockquote>
<h4 id="所有的worker的request都在wait-map-task-finished"><a href="#所有的worker的request都在wait-map-task-finished" class="headerlink" title="所有的worker的request都在wait map task finished"></a>所有的worker的request都在wait map task finished</h4><p>之前把map task都分配后，再有request就进入wait map task finished阶段，但有map task crash了！！</p>
<p>就导致无限等待了</p>
]]></content>
      <categories>
        <category>6.824</category>
      </categories>
      <tags>
        <tag>6.824</tag>
        <tag>Distributed Systems</tag>
      </tags>
  </entry>
  <entry>
    <title>二分法</title>
    <url>/2021/06/28/%E4%BA%8C%E5%88%86%E6%B3%95/</url>
    <content><![CDATA[<h2 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h2><h4 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h4><p><a href="https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/">leetcode 153</a></p>
<h4 id="Key-of-Solution"><a href="#Key-of-Solution" class="headerlink" title="Key of Solution"></a>Key of Solution</h4><p>在于选择mi与le还是ri比较。通过找规律，可以发现两种情况下nums[mi]与nums[le], nums[ri]的关系（也就是作为缩小范围的依据）都会改变。</p>
<p>然后mi的计算方式可能会有mi&#x3D;&#x3D;le的情况，其成为特例破坏我们预设的规则，所以选择nums[mi]与nums[ri]的比较，完美解决此题。</p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findMin</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">le</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ri</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (le &lt; ri) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mi</span> <span class="operator">=</span> (le + ri) / <span class="number">2</span>;</span><br><span class="line">            <span class="comment">// 1</span></span><br><span class="line">            <span class="keyword">if</span> (nums[mi] &gt; nums[ri]) &#123;</span><br><span class="line">                le = mi + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 2</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                ri = mi;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums[le];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Aalgorithm</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Useful Blog</title>
    <url>/2023/03/19/Useful-Blog/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>地址</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.yezhem.com/index.php/archives/58/">https://www.yezhem.com/index.php/archives/58/</a></td>
<td>给hyper-v虚拟机固定静态IP</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
  </entry>
  <entry>
    <title>Git Learning</title>
    <url>/2023/03/20/Git-Learning/</url>
    <content><![CDATA[<h1 id="重学git"><a href="#重学git" class="headerlink" title="重学git"></a>重学git</h1><p>ref: <a href="https://www.atlassian.com/zh/git/tutorials">https://www.atlassian.com/zh/git/tutorials</a>, <a href="https://learngitbranching.js.org/?locale=zh_CN">https://learngitbranching.js.org/?locale=zh_CN</a></p>
<h2 id="一些要点"><a href="#一些要点" class="headerlink" title="一些要点"></a>一些要点</h2><ul>
<li>Git 的协作模式基于代码库与代码库之间的互动，也就是不是将工作副本检入 SVN 的中央代码库，而是<strong>将提交从一个代码库推送或拉取到另一个代码库。</strong></li>
</ul>
<h2 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h2><img src="/images/image-20230320215241571.png" alt="image-20230320215241571" style="zoom: 50%;" />

<p>git clone主要用于指向现有的repo，并在另一个位置的新目录中对该repo进行<strong>克隆或复制</strong>。原始存储库可以位于本地文件系统上，也可以位于远程机器可访问的支持协议上。git clone命令复制现有的git存储库。它有自己的历史记录，管理自己的文件，并且是一个与原始存储库完全隔离的环境。</p>
<p>为了方便起见，克隆会自动创建一个名为“origin”的远程连接，指向原始存储库。这使得与中央存储库进行交互变得非常容易。这种自动连接是通过在<code>refs/remotes/origin</code>下创建到远程分支头的Git引用，并通过初始化<code>remote.origin.url</code>和<code>remote.origing.fetch</code>配置变量来建立的。</p>
<h2 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h2><p>在 Git 或其他版本控制系统中工作时，“保存”的概念比在文字处理器或其他传统文件编辑应用中保存的流程更为细致。传统的软件表达方式“保存”与 Git 术语“提交”同义。Git 中的提交相当于“保存”。应将传统保存视为一种用于覆盖现有文件或写入新文件的文件系统操作。或者，<strong>Git 提交是一种作用于文件和目录集合的操作</strong>。</p>
<p>在 Git 和 SVN 中保存变更也是不同的流程。SVN 提交或“签入”是指远程推送到集中式服务器的操作。这意味着 SVN 提交需要访问互联网才能完全“保存”项目变更。Git 提交可以在本地捕获和构建，然后根据需要使用 <code>git push-u origin</code> 主命令推送到远程服务器。这两种方法之间的区别是架构设计之间的根本区别。<strong>Git 是分布式应用模型</strong>，而 SVN 是集中式模型。分布式应用通常更强大，因为它们不像集中式服务器那样存在单点故障。</p>
<p>Git 还有一个名为 “the stash” 的额外保存机制。<strong>stash 是一个临时存储区，用于存放尚未准备提交的变更</strong>。stash 在工作目录上运行，工作目录是<a href="https://www.atlassian.com/zh/git/tutorials/undoing-changes/git-reset">三棵树</a>中的第一个，有大量的使用选项。要了解更多信息，请访问 <code>git stash</code> 页面。</p>
<p>可以将 Git 存储库配置为<strong>忽略特定的文件或目录。这将防止 Git 保存对任何忽略内容的变更</strong>。Git 有多种管理忽略列表的配置方法。Git 忽略配置在 <code>git ignore</code> 页面中有更详细的介绍。</p>
<h4 id="git-add-1"><a href="#git-add-1" class="headerlink" title="git add"></a>git add</h4><p><code>git add</code> 命令将工作目录中的变更添加到暂存区域。它告诉 Git 您想在下一次提交中包含对特定文件的更新。但是，<code>git add</code> 并没有真正对存储库产生任何重大影响，只有在您运行 <code>git commit</code> 后才会真正记录提交。</p>
<h4 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h4><p><code>git add</code> 和 <code>git commit</code> 命令构成了基本的 Git 工作流程。这是每个 Git 用户需要理解的两个命令，无论他们的团队采用何种协作模式。它们是将项目版本记录到存储库历史记录中的方法。</p>
<p><strong>开发项目围绕基本的编辑&#x2F;暂存&#x2F;提交模式进行</strong>：首先，在工作目录中编辑文件。当您准备好保存项目当前状态的副本时，您可以使用 <code>git add</code> 暂存变更。对暂存的快照感到满意后，您可以使用 <code>git commit</code> 将其提交到项目历史记录中。<code>git reset</code> 命令用于撤销提交或暂存的快照。除了 <code>git add</code> 和 <code>git commit</code> 外，第三个命令 <code>git push</code> 对于完整的协作 Git 工作流程至关重要。<code>git push</code> 用于将提交的变更发送到远程存储库进行协作。这使其他团队成员能够访问一组已保存的变更。每次修改文件时都需要调用 <code>git add</code>，这听起来可能多余，但是这种工作流程使保持项目井然有序变得容易得多。</p>
<h4 id="暂存区域"><a href="#暂存区域" class="headerlink" title="暂存区域"></a>暂存区域</h4><p><code>git add</code> 命令的主要功能是将工作目录中待处理的变更提升到 <code>git staging</code> 区域。暂存区域是 Git 比较独特的功能之一，暂存区域被认为是 <a href="https://www.atlassian.com/zh/git/tutorials/undoing-changes/git-reset">Git 的“三棵树”</a>之一，还有工作目录和提交历史记录。</p>
<p>暂存不必提交自上次提交以来所做的所有变更，而是在将相关变更实际提交到项目历史记录之前，<strong>将相关变更分组为高度集中的快照</strong>。这<strong>意味着您可以对不相关的文件进行各种编辑，然后返回并将它们拆分为逻辑提交</strong>，<strong>方法是将相关变更添加到暂存并逐段提交</strong>。与任何版本控制系统一样，<strong>创建原子提交很重要，这样可以轻松跟踪错误并还原变更</strong>，同时最大限度地减少对项目其余部分的影响。</p>
<blockquote>
<p>add 和 commit分开的原因：</p>
<ul>
<li>add方便对更改进行拆分，可以对不相关的文件进行各种编辑，然后返回并将它们拆分为逻辑提交。方法是将相关变更添加到暂存并逐段提交</li>
</ul>
</blockquote>
<p>总结：</p>
<p>综上所述，<code>git add</code> 是一系列操作中的第一个命令，它指示 Git 将当前项目状态的快照“保存”到提交历史记录中。单独使用时，<code>git add</code> 会将待处理的变更从工作目录提升到暂存区域。<code>git status</code> 命令用于检查存储库的当前状态，也可用于确认 <code>git add</code> 升级。<code>git reset</code> 命令用于撤销 <code>git add</code>。然后，使用 <code>git commit</code> 命令将暂存目录的快照提交到存储库的提交历史记录。</p>
<h2 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h2><p><code>git commit</code> 命令捕获项目当前暂存变更的快照。提交的快照可以被视为项目的“安全”版本——除非您明确要求，否则 Git 永远不会更改它们。快照提交到本地存储库，这完全不需要与其他 Git 存储库进行交互。之后可以将 Git 提交推送到任意远程存储库。</p>
<h4 id="工作原理-1"><a href="#工作原理-1" class="headerlink" title="工作原理"></a>工作原理</h4><p>从高层次上讲，可以将 Git 视为时间线管理实用程序。提交是 Git 项目时间线的核心构建块单元。可以将提交视为 Git 项目时间线上的快照或里程碑。</p>
<h4 id="快照，而不是差异"><a href="#快照，而不是差异" class="headerlink" title="快照，而不是差异"></a>快照，而不是差异</h4><p>除了 SVN 和 Git 之间的实际区别外，它们的底层实现还遵循完全不同的设计理念。SVN 跟踪文件的差异，而 Git 的版本控制模型则基于快照。例如，SVN 提交包含与添加到存储库的原始文件相比的差异。而 Git 会在每次提交中记录每个文件的全部内容。</p>
<img src="/images/image-20230321110255642.png" alt="image-20230321110255642" style="zoom:50%;" />

<p>这使得许多 Git 操作比 SVN 快得多，因为不必从其差异中“汇编”文件的特定版本——每个文件的完整版本可以立即从 Git 的内部数据库中获得。</p>
<h2 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h2><p>比对功能接受两个输入数据集并输出它们之间的变更。<code>git diff</code> 是一个多用途 Git 命令，它在执行时会在 Git 数据源上运行比对功能。</p>
<h2 id="Git-stash"><a href="#Git-stash" class="headerlink" title="Git stash"></a>Git stash</h2><p>git stash临时搁置（或隐藏）您对工作副本所做的更改，这样您就可以处理其他内容，然后再回来重新应用它们。如果你需要快速切换上下文并开始做其他事情，但是你正在进行代码更改并且还没有准备好提交，那么stash功能非常方便。</p>
<p><code>git stash</code> 命令会将当前工作目录中的所有修改（包括已经加入到暂存区域的修改）暂存起来。暂存区域中的修改不会被清除或重置，而是一同被储藏起来。</p>
<h4 id="Stashing-untracked-or-ignored-files"><a href="#Stashing-untracked-or-ignored-files" class="headerlink" title="Stashing untracked or ignored files"></a>Stashing untracked or ignored files</h4><p>默认情况下，运行 <code>git stash</code> 命令会将以下内容储藏起来：</p>
<ul>
<li>已经被加入到暂存区域的修改（即已经被 <code>git add</code> 添加的修改）</li>
<li>当前被 Git 跟踪的文件中所做的修改（即未加入到暂存区域的修改）</li>
</ul>
<p>但是，<code>git stash</code> 命令不会储藏以下内容：</p>
<ul>
<li>工作目录中尚未被加入到暂存区域的新文件</li>
<li>被 Git 忽略的文件</li>
</ul>
<p>如果在 <code>git stash</code> 命令中添加 <code>-u</code> 选项（或 <code>--include-untracked</code>），则会将未被 Git 跟踪的文件也一并储藏起来。这些未被跟踪的文件指的是在 Git 仓库中还没有被添加过的文件，或者是被 <code>.gitignore</code> 文件所忽略的文件。</p>
<img src="/images/image-20230321113434497.png" alt="image-20230321113434497" style="zoom:50%;" />

<h2 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h2><p>Git会将您工作目录中的每个文件视为以下三种情况之一：</p>
<ul>
<li><p>已跟踪（tracked）- 已经被Git跟踪的文件，也就是之前已经被添加到暂存区域或者已经提交过的文件；</p>
</li>
<li><p>未跟踪（untracked）- 没有被添加到暂存区域或者没有被提交过的文件；</p>
</li>
<li><p>被忽略（ignored）- Git已经被明确告知要忽略的文件。</p>
</li>
</ul>
<p>被忽略的文件通常是构建工件和机器生成的文件，这些文件可以从存储库源派生，或者不应该提交。一些常见的例子有：</p>
<ul>
<li>依赖缓存目录，例如 <code>/node_modules</code> 或 <code>/packages</code></li>
<li>编译后的代码，例如 <code>.o</code>，<code>.pyc</code> 和 <code>.class</code> 文件</li>
<li>构建输出目录，例如 <code>/bin</code>，<code>/out</code> 或 <code>/target</code></li>
<li>运行时生成的文件，例如 <code>.log</code>，<code>.lock</code> 或 <code>.tmp</code></li>
<li>隐藏的系统文件，例如 <code>.DS_Store</code> 或 <code>Thumbs.db</code></li>
<li>个人 IDE 配置文件，例如 <code>.idea/workspace.xml</code></li>
</ul>
<h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>:stuck_out_tongue:早建分支！多用分支！</p>
<p>即使创建再多的分支也不会造成储存或内存上的开销，并且按逻辑分解工作到不同的分支要比维护那些特别臃肿的分支简单多了。</p>
<p>使用分支其实就相当于在说：“<strong>我想基于这个提交以及它所有的父提交进行新的工作。</strong>”</p>
<h2 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h2><p>将两个分支合并到一起。就是说我们新建一个分支，在其上开发某个新功能，开发完成后再合并回主线。</p>
<h2 id="场景解决"><a href="#场景解决" class="headerlink" title="场景解决"></a>场景解决</h2><blockquote>
<p>你之前在 <code>newImage</code> 分支上进行了一次提交，然后又基于它创建了 <code>caption</code> 分支，然后又提交了一次。</p>
<p>此时你想对某个以前的提交记录进行一些小小的调整。比如设计师想修改一下 <code>newImage</code> 中图片的分辨率，尽管那个提交记录并不是最新的了。</p>
</blockquote>
<p>我们可以通过下面的方法来克服困难：</p>
<ul>
<li>先用 <code>git rebase -i</code> 将提交重新排序，然后把我们<strong>想要修改的提交记录挪到最前</strong></li>
<li>然后用 <code>git commit --amend</code> 来<strong>进行一些小修改</strong></li>
<li>接着再用 <code>git rebase -i</code> 来将他们<strong>调回原来的顺序</strong></li>
<li>最后我们把 main 移到修改的最前端（用你自己喜欢的方法），就大功告成啦！</li>
</ul>
<blockquote>
<p>正如你在上一关所见到的，我们可以使用 <code>rebase -i</code> 对提交记录进行重新排序。只要把我们想要的提交记录挪到最前端，我们就可以很轻松的用 <code>--amend</code> 修改它，然后把它们重新排成我们想要的顺序。</p>
<p>但这样做就唯一的问题就是要进行两次排序，而这有可能造成由 rebase 而导致的冲突。下面还是看看 <code>git cherry-pick</code> 是怎么做的吧。</p>
</blockquote>
<p>cherry-pick 可以将提交树上任何地方的提交记录取过来追加到 HEAD 上（只要不是 HEAD 上游的提交就没问题）。</p>
<ul>
<li>git checkout C1</li>
<li>git cherry-pick C2</li>
<li>git commit –amend</li>
<li>git cherry-pick C3</li>
</ul>
<p>相当于重新走一遍</p>
<h2 id="Git-Tags"><a href="#Git-Tags" class="headerlink" title="Git Tags"></a>Git Tags</h2><p>分支很容易被人为移动，并且当有新的提交时，它也会移动。分支很容易被改变，大部分分支还只是临时的，并且还一直在变。</p>
<p>有没有什么可以<em>永远</em>指向某个提交记录的标识呢，比如软件发布新的大版本，或者是修正一些重要的 Bug 或是增加了某些新特性，有没有比分支更好的可以永远指向这些提交的方法呢？</p>
<p>当然有了！Git 的 tag 就是干这个用的啊，它们可以（在某种程度上 —— 因为标签可以被删除后重新在另外一个位置创建同名的标签）永久地将某个特定的提交命名为里程碑，然后就可以像分支一样引用了。更难得的是，它们并不会随着新的提交而移动。你也不能切换到某个标签上面进行修改提交，它就像是提交树上的一个锚点，标识了某个特定的位置。</p>
<h2 id="多分支-rebase"><a href="#多分支-rebase" class="headerlink" title="多分支 rebase"></a>多分支 rebase</h2><ul>
<li>rebase -i</li>
<li>rebase</li>
<li>cherry-pick</li>
</ul>
<h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><p>远程仓库并不复杂, 在如今的云计算盛行的世界很容易把远程仓库想象成一个富有魔力的东西, 但实际上它们只是你的仓库在另个一台计算机上的拷贝。你可以通过因特网与这台计算机通信 —— 也就是增加或是获取提交记录</p>
<p>话虽如此, 远程仓库却有一系列强大的特性</p>
<ul>
<li>首先也是最重要的的点, 远程仓库是一个<strong>强大的备份</strong>。本地仓库也有恢复文件到指定版本的能力, 但所有的信息都是保存在本地的。有了远程仓库以后，即使丢失了本地所有数据, 你仍可以通过远程仓库拿回你丢失的数据。</li>
<li>还有就是, <strong>远程让代码社交化了</strong>! 既然你的项目被托管到别的地方了, 你的朋友可以更容易地为你的项目做贡献(或者拉取最新的变更)</li>
</ul>
<p>现在用网站来对远程仓库进行可视化操作变得越发流行了(像 <a href="https://github.com/">GitHub</a>), 但远程仓库<strong>永远</strong>是这些工具的顶梁柱, 因此理解其概念非常的重要!</p>
<h4 id="git-clone-1"><a href="#git-clone-1" class="headerlink" title="git clone"></a>git clone</h4><p>使用<code>git clone</code> 命令了，咱们深入地看一下发生了什么。</p>
<p>你可能注意到的第一个事就是在我们的本地仓库多了一个名为 <code>o/main</code> 的分支, 这种类型的分支就叫<strong>远程</strong>分支。由于远程分支的特性导致其拥有一些特殊属性。</p>
<p>远程分支反映了远程仓库(在你上次和它通信时)的<strong>状态</strong>。这会有助于你理解本地的工作与公共工作的差别 —— 这是你与别人分享工作成果前至关重要的一步.</p>
<p>远程分支有一个特别的属性，在你checkout时自动进入分离 HEAD 状态。Git 这么做是出于不能直接在这些分支上进行操作的原因, 你必须在别的地方完成你的工作, <strong>（更新了远程分支之后）再用远程分享你的工作成果。</strong></p>
<h4 id="Git-Fetch"><a href="#Git-Fetch" class="headerlink" title="Git Fetch"></a>Git Fetch</h4><p>Git 远程仓库相当的操作实际可以归纳为两点：向远程仓库传输数据以及从远程仓库获取数据。既然我们能与远程仓库同步，那么就可以分享任何能被 Git 管理的更新（因此可以分享代码、文件、想法、情书等等）。</p>
<p>本节课我们将学习如何从远程仓库获取数据 —— 命令如其名，它就是 <code>git fetch</code>。</p>
<p><code>git fetch</code> 完成了仅有的但是很重要的两步:</p>
<ul>
<li>从远程仓库下载本地仓库中缺失的提交记录</li>
<li>更新远程分支指针(如 <code>o/main</code>)</li>
</ul>
<p><code>git fetch</code> 并不会改变你本地仓库的状态。它不会更新你的 <code>main</code> 分支，也不会修改你磁盘上的文件。所以, 你可以将 <code>git fetch</code> 的理解为单纯的下载操作。</p>
<h2 id="Git-Pull"><a href="#Git-Pull" class="headerlink" title="Git Pull"></a>Git Pull</h2><p>如何用 <code>git fetch</code> 获取远程的数据, 现在我们学习如何将这些变化更新到我们的工作当中。</p>
<p>其实有很多方法的 —— 当远程分支中有新的提交时，你可以像合并本地分支那样来合并远程分支。也就是说就是你可以执行以下命令:</p>
<ul>
<li><code>git cherry-pick o/main</code></li>
<li><code>git rebase o/main</code></li>
<li><code>git merge o/main</code></li>
<li>等等</li>
</ul>
<p>实际上，<strong>由于先抓取更新再合并到本地分支这个流程很常用，因此 Git 提供了一个专门的命令来完成这两个操作。它就是我们要讲的 <code>git pull</code>。</strong></p>
<p><code>git pull</code> 就是 git fetch 和 git merge 的缩写！</p>
<h2 id="Git-Push"><a href="#Git-Push" class="headerlink" title="Git Push"></a>Git Push</h2><p>上传自己分享内容与下载他人的分享刚好相反，那与 <code>git pull</code> 相反的命令是什么呢？<code>git push</code>！</p>
<h2 id="历史偏离"><a href="#历史偏离" class="headerlink" title="历史偏离"></a>历史偏离</h2><blockquote>
<p>假设你周一克隆了一个仓库，然后开始研发某个新功能。到周五时，你新功能开发测试完毕，可以发布了。但是 —— 天啊！你的同事这周写了一堆代码，还改了许多你的功能中使用的 API，这些变动会导致你新开发的功能变得不可用。但是他们已经将那些提交推送到远程仓库了，因此你的工作就变成了基于项目<strong>旧版</strong>的代码，与远程仓库最新的代码不匹配了。</p>
<p>这种情况下, <code>git push</code> 就不知道该如何操作了。如果你执行 <code>git push</code>，Git 应该让远程仓库回到星期一那天的状态吗？还是直接在新代码的基础上添加你的代码，亦或由于你的提交已经过时而直接忽略你的提交？</p>
<p>因为这情况（历史偏离）有许多的不确定性，Git 是不会允许你 <code>push</code> 变更的。实际上它会强制你先合并远程最新的代码，然后才能分享你的工作。</p>
</blockquote>
<ul>
<li>git pull –rebase</li>
<li>git pull                       # merge</li>
</ul>
<h2 id="远程服务器拒绝-Remote-Rejected"><a href="#远程服务器拒绝-Remote-Rejected" class="headerlink" title="远程服务器拒绝!(Remote Rejected)"></a>远程服务器拒绝!(Remote Rejected)</h2><blockquote>
<p>如果你是在一个大的合作团队中工作, 很可能是main被锁定了, 需要一些Pull Request流程来合并修改。如果你直接提交(commit)到本地main, 然后试图推送(push)修改, 你将会收到这样类似的信息:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">! [远程服务器拒绝] main -&gt; main (TF402455: 不允许推送(push)这个分支; 你必须使用pull request来更新这个分支.)</span><br></pre></td></tr></table></figure>

<p>远程服务器拒绝直接推送(push)提交到main, 因为策略配置要求 pull requests 来提交更新.</p>
<p>你应该按照流程,新建一个分支, 推送(push)这个分支并<strong>申请pull request</strong>, 但是你忘记并直接提交给了main.现在你卡住并且无法推送你的更新.</p>
</blockquote>
<p>新建一个分支feature, 推送到远程服务器. 然后reset你的main分支和远程服务器保持一致, 否则下次你pull并且他人的提交和你冲突的时候就会有问题.</p>
<h2 id="为什么不用-merge-呢"><a href="#为什么不用-merge-呢" class="headerlink" title="为什么不用 merge 呢?"></a>为什么不用 merge 呢?</h2><p>为了 push 新变更到远程仓库，你要做的就是<strong>包含</strong>远程仓库中最新变更。意思就是只要你的本地分支包含了远程分支（如 <code>o/main</code>）中的最新变更就可以了，至于具体是用 rebase 还是 merge，并没有限制。</p>
<p>那么既然没有规定限制，为何前面几节都在着重于 rebase 呢？为什么在操作远程分支时不喜欢用 <code>merge</code> 呢？</p>
<p>在开发社区里，有许多关于 merge 与 rebase 的讨论。以下是关于 rebase 的优缺点：</p>
<p>优点:</p>
<ul>
<li><strong>Rebase 使你的提交树变得很干净, 所有的提交都在一条线上</strong></li>
</ul>
<p>缺点:</p>
<ul>
<li>Rebase <strong>修改了提交树的历史</strong></li>
</ul>
<p>比如, 提交 C1 可以被 rebase 到 C3 之后。这看起来 C1 中的工作是在 C3 之后进行的，<strong>但实际上是在 C3 之前</strong>。</p>
<p>一些开发人员喜欢保留提交历史，因此更偏爱 merge。而其他人（比如我自己）可能<strong>更喜欢干净的提交树</strong>，于是偏爱 rebase。仁者见仁，智者见智。 :D</p>
<h2 id="远程跟踪"><a href="#远程跟踪" class="headerlink" title="远程跟踪"></a>远程跟踪</h2><p>直接了当地讲，<code>main</code> 和 <code>o/main</code> 的关联关系就是由分支的“remote tracking”属性决定的。<code>main</code> 被设定为跟踪 <code>o/main</code> —— 这意味着为 <code>main</code> 分支<strong>指定了推送的目的地以及拉取后合并的目标。</strong></p>
<p>你可能想知道 <code>main</code> 分支上这个属性是怎么被设定的，你并没有用任何命令指定过这个属性呀！好吧, 当你克隆仓库的时候, Git 就自动帮你把这个属性设置好了。</p>
<p>当你克隆时, Git 会为远程仓库中的每个分支在本地仓库中创建一个远程分支（比如 <code>o/main</code>）。然后再创建一个跟踪远程仓库中活动分支的本地分支，默认情况下这个本地分支会被命名为 <code>main</code>。</p>
<p>克隆完成后，你会得到一个本地分支（如果没有这个本地分支的话，你的目录就是“空白”的），但是可以查看远程仓库中所有的分支（如果你好奇心很强的话）。这样做对于本地仓库和远程仓库来说，都是最佳选择。</p>
<p>这也解释了为什么会在克隆的时候会看到下面的输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">local branch &quot;main&quot; set to track remote branch &quot;o/main&quot;</span><br></pre></td></tr></table></figure>





































]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Code review in Golang</title>
    <url>/2023/03/21/Code-review-in-Golang/</url>
    <content><![CDATA[<h2 id="Code-review-in-Golang"><a href="#Code-review-in-Golang" class="headerlink" title="Code review in Golang"></a>Code review in Golang</h2><p>ref: <a href="https://github.com/golang/go/wiki/CodeReviewComments">https://github.com/golang/go/wiki/CodeReviewComments</a></p>
<h4 id="Gofmt"><a href="#Gofmt" class="headerlink" title="Gofmt"></a>Gofmt</h4><p>运行 <code>gofmt</code> 可以自动修复大部分机械风格问题。几乎所有在外部使用的 Golang 代码都使用 <code>gofmt</code> 进行<strong>格式化</strong>。</p>
<h4 id="Comment-Sentences"><a href="#Comment-Sentences" class="headerlink" title="Comment Sentences"></a>Comment Sentences</h4><p>记录声明的注释，应该使用完整的句子。这种方法使得当将它们提取到 godoc 文档中时，它们的格式很好。<strong>注释应该以被描述的事物名称开头，并以句号结束</strong>：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Request represents a request to run a command.</span></span><br><span class="line"><span class="keyword">type</span> Request <span class="keyword">struct</span> &#123; ...</span><br><span class="line"></span><br><span class="line"><span class="comment">// Encode writes the JSON encoding of req to w.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Encode</span><span class="params">(w io.Writer, req *Request)</span></span> &#123; ...</span><br></pre></td></tr></table></figure>

<h4 id="Contexts"><a href="#Contexts" class="headerlink" title="Contexts"></a>Contexts</h4><p><code>context.Context</code> 类型的值在 API 和进程边界之间携带安全凭证、跟踪信息、截止时间和取消信号。Go 程序会将 Contexts 在整个函数调用链中显式传递，从传入的 RPC 和 HTTP 请求到传出的请求。</p>
<p>大多数使用 Context 的函数应将其作为<strong>第一个参数接受</strong>：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">F</span><span class="params">(ctx context.Context, /* other arguments */)</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>一个从不特定于请求的函数可以使用 <code>context.Background()</code>，但即使您认为不需要，也要尽量传递一个 Context。默认情况下是传递一个 Context；只有在确有充分理由认为替代方案是错误的情况下，才直接使用 <code>context.Background()</code>。</p>
<p><strong>不要将 Context 成员添加到结构类型中</strong>；相反，为该类型上每个需要传递它的方法添加一个 ctx 参数。唯一的例外是那些签名必须与标准库或第三方库中的接口匹配的方法。</p>
<p>不要创建自定义 Context 类型或在函数签名中使用除 Context 以外的接口。</p>
<p>如果您有应用程序数据需要传递，将其放在参数中、接收器中、全局变量中，或者，如果它确实属于那里，放在 Context 值中。</p>
<p>Contexts 是<strong>不可变</strong>的，因此将相同的 ctx 传递给多个共享相同截止时间、取消信号、凭证、父跟踪等的调用是可以的。</p>
<h4 id="Copying"><a href="#Copying" class="headerlink" title="Copying"></a>Copying</h4><p>为避免意外的别名问题，在从另一个包中复制结构体时要小心。例如，bytes.Buffer 类型包含一个 []byte 切片。如果您复制一个 Buffer，副本中的切片可能会别名原始数组，导致后续的方法调用产生令人惊讶的效果。</p>
<p>通常情况下，如果类型 T 的方法与指针类型 *T 相关联，则不要复制类型 T 的值。</p>
<p>举例如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 创建一个 bytes.Buffer 类型的实例</span></span><br><span class="line">	<span class="keyword">var</span> buf bytes.Buffer</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 向 buf 中写入数据</span></span><br><span class="line">	buf.WriteString(<span class="string">&quot;Hello, world!&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 复制 buf</span></span><br><span class="line">	bufCopy := buf</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 分别在原始 buf 和复制的 bufCopy 上调用方法</span></span><br><span class="line">	buf.WriteByte(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">	bufCopy.WriteByte(<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 打印两个缓冲区的内容</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;Original buffer: %s\n&quot;</span>, buf.String())   <span class="comment">// 输出: Original buffer: Hello, world!B</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;Copied buffer: %s\n&quot;</span>, bufCopy.String()) <span class="comment">// 输出: Copied buffer: Hello, world!B</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 我们本来期望从 buf 中读取 &quot;Hello, world!A&quot;，但是结果却是 &quot;Hello, world!B&quot;。这是因为 buf 和 bufCopy 的底层数组共享同一内存，导致调用方法时产生了意外的效果。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在 Go 语言中，当我们直接将一个结构体赋值给另一个结构体时，实际上进行的是值复制。这意味着结构体中的每个字段都会被逐一复制到新的结构体中。对于简单类型（例如 int、float、bool 等）和数组，复制操作会创建新的数据副本。<strong>然而，对于切片（slice）和引用类型（如指针、映射和通道），复制操作仅复制它们的引用，而不会复制底层数据</strong>。</p>
<p>在本例中，<code>bytes.Buffer</code> 类型包含一个 <code>[]byte</code> 切片。当我们直接复制 <code>bytes.Buffer</code> 时，<strong>它的底层数组并没有被复制，而只是复制了指向该底层数组的切片引用</strong>。因此，**<code>buf</code> 和 <code>bufCopy</code> 实际上共享同一块底层内存**。在这种情况下，对其中一个 <code>bytes.Buffer</code> 实例进行的任何更改都会影响另一个实例，从而导致意外的行为。</p>
<p>要理解这一点，可以将切片想象成一个具有三个字段的结构体：一个指向底层数组的指针、一个表示切片长度的整数和一个表示切片容量的整数。当我们复制一个包含切片的结构体时，实际上复制的是这三个字段。因此，新切片和原切片指向的是相同的底层数组，它们共享相同的内存。</p>
</blockquote>
<h4 id="Crypto-Rand"><a href="#Crypto-Rand" class="headerlink" title="Crypto Rand"></a>Crypto Rand</h4><p>不要使用 math&#x2F;rand 包来生成密钥，即使是一次性的密钥也不行。未使用种子时，<strong>生成器是完全可预测的</strong>。使用 time.Nanoseconds() 作为种子时，<strong>只有几个比特的熵</strong>。相反，应该使用 crypto&#x2F;rand 的 Reader，如果需要文本，则可以将其打印为十六进制或 base64 格式：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;crypto/rand&quot;</span></span><br><span class="line">	<span class="comment">// &quot;encoding/base64&quot;</span></span><br><span class="line">	<span class="comment">// &quot;encoding/hex&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Key</span><span class="params">()</span></span> <span class="type">string</span> &#123;</span><br><span class="line">	buf := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">16</span>)</span><br><span class="line">	_, err := rand.Read(buf)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err) <span class="comment">// out of randomness, should never happen</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;%x&quot;</span>, buf)</span><br><span class="line">	<span class="comment">// or hex.EncodeToString(buf)</span></span><br><span class="line">	<span class="comment">// or base64.StdEncoding.EncodeToString(buf)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Declaring-Empty-Slices"><a href="#Declaring-Empty-Slices" class="headerlink" title="Declaring Empty Slices"></a>Declaring Empty Slices</h4><p>在声明一个空切片时，应该优先使用</p>
<p><code>var t []string </code> 而不是  <code>t := []string&#123;&#125;</code></p>
<p>前者声明了一个 <strong>nil 切片值</strong>，而后者是一个非 nil 但长度为零的切片。它们在功能上是等效的——它们的 len 和 cap 都为零——但是 nil 切片是首选的风格。</p>
<p>需要注意的是，在某些有限的情况下，非 nil 但长度为零的切片是首选的，例如编码 JSON 对象时（nil 切片编码为 null，而 []string{} 编码为 JSON 数组 []）。</p>
<p>在设计接口时，应避免将 nil 切片和非 nil、长度为零的切片区分开来，因为这可能会导致微妙的编程错误。</p>
<p>有关 Go 中 nil 的更多讨论，请参见 Francesc Campoy 的演讲 <a href="https://www.youtube.com/watch?v=ynoY2xz-F8s">Understanding Nil</a>.</p>
<h4 id="Don’t-Panic"><a href="#Don’t-Panic" class="headerlink" title="Don’t Panic"></a>Don’t Panic</h4><p>不要将 panic 用于正常的错误处理。使用 error 和多个返回值。</p>
<p>通常情况下，当函数或方法遇到错误时，应该返回一个错误值，而不是抛出一个异常或使用 panic。这样可以使代码更加健壮和可靠，因为它允许代码在遇到错误时进行适当的处理，而不是在程序崩溃时才发现问题。</p>
<h4 id="Error-Strings"><a href="#Error-Strings" class="headerlink" title="Error Strings"></a>Error Strings</h4><p>错误字符串不应该大写（除非以专有名词或缩写词开头），也不应该以标点符号结尾，因为它们通常是在其他上下文中打印的。也就是说，应该使用 fmt.Errorf(“something bad”) 而不是 fmt.Errorf(“Something bad”)，这样 log.Printf(“Reading %s: %v”, filename, err) 就可以格式化成一个无意义的大写字母中间消息。这不适用于日志记录，因为日志记录隐含是基于行的，不会与其他消息合并在一起。</p>
<h4 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h4><p>添加新 package 时，请包括预期用途的示例：可运行的示例，或演示完整调用序列的简单测试。</p>
<h4 id="Goroutine-Lifetimes"><a href="#Goroutine-Lifetimes" class="headerlink" title="Goroutine Lifetimes"></a>Goroutine Lifetimes</h4><p>当你启动 goroutine 时，<strong>要清楚它们何时（或是否）退出</strong>。</p>
<p>goroutine 会因为在<strong>通道发送或接收时阻塞</strong>而泄露：<strong>即使它所阻塞的通道不可达，垃圾回收器也不会终止一个 goroutine</strong>。</p>
<p>即使 goroutine 没有泄露，让它们在不再需要时仍处于执行状态可能会导致其他微妙且难以诊断的问题。<strong>在关闭的通道上发送消息会引发 panic</strong>。并且让 goroutine 长时间处于执行状态可能会导致不可预测的内存使用。</p>
<p>尽量<strong>让并发代码简单明了</strong>，<strong>以便 goroutine 的生命周期显而易见</strong>。如果这不可行，就要<strong>记录 goroutine 退出的时间和原因</strong>。</p>
<h4 id="Handle-Errors"><a href="#Handle-Errors" class="headerlink" title="Handle Errors"></a>Handle Errors</h4><p>不要使用 _ 变量丢弃错误。如果一个函数返回一个错误，<strong>要检查它以确保函数成功执行</strong>。要处理错误、返回错误，<strong>或者在真正异常的情况下使用 panic</strong>。</p>
<h4 id="Imports"><a href="#Imports" class="headerlink" title="Imports"></a>Imports</h4><p>除非需要避免名称冲突，否则应避免重命名导入；良好的包名称不应需要重命名。在<strong>发生冲突的情况下，优先重命名最本地或项目特定的导入</strong>。</p>
<p>导入应该组织在组中，并在它们之间有空白行。标准库的包始终在第一组中。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;hash/adler32&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/foo/bar&quot;</span></span><br><span class="line">	<span class="string">&quot;rsc.io/goversion/version&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><a href="https://pkg.go.dev/golang.org/x/tools/cmd/goimports">goimports</a> will do this for you.</p>
<h4 id="Import-Blank"><a href="#Import-Blank" class="headerlink" title="Import Blank"></a>Import Blank</h4><p>仅为了副作用（我们只是希望该包中的代码能够执行一些副作用，例如注册一个 HTTP 处理器或者执行一些<strong>初始化逻辑</strong>。）而导入的包（使用语法 import _ “pkg”）应该只在程序的 <strong>main 包</strong>或需要它们的测试中被导入。</p>
<h4 id="Go-modules简单使用"><a href="#Go-modules简单使用" class="headerlink" title="Go modules简单使用"></a>Go modules简单使用</h4><ul>
<li>打开包含 <code>go.mod</code> 文件的文件夹作为工作区</li>
<li>使用模块路径：<code>&quot;tytao.com/example/bar/testutil&quot;</code> 而不是  <code>&quot;bar/testutil&quot;</code></li>
</ul>
<h4 id="In-Band-Errors"><a href="#In-Band-Errors" class="headerlink" title="In-Band Errors"></a>In-Band Errors</h4><p>在 C 和类似的语言中，函数常常会返回像 -1 或 null 这样的值来表示错误或缺少结果。</p>
<p>Go 支持<strong>多返回值</strong>提供了更好的解决方案。函数不应该要求客户端检查内部错误值，而是应该<strong>返回一个额外的值来指示其它返回值是否有效</strong>。这个返回值可以是一个错误，或者当不需要解释时可以是一个布尔值。它应该是最后一个返回值。</p>
<h4 id="Indent-Error-Flow"><a href="#Indent-Error-Flow" class="headerlink" title="Indent Error Flow"></a>Indent Error Flow</h4><p>尽量将正常的代码路径<strong>保持在最小缩进</strong>，将错误处理缩进处理，首先处理它。这通过允许快速扫描正常路径来提高代码的可读性。例如，不要写成：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">	<span class="comment">// error handling</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="comment">// normal code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Instead, write:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">	<span class="comment">// error handling</span></span><br><span class="line">	<span class="keyword">return</span> <span class="comment">// or continue, etc.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// normal code</span></span><br></pre></td></tr></table></figure>

<h4 id="Initialisms"><a href="#Initialisms" class="headerlink" title="Initialisms"></a>Initialisms</h4><p>在名称中表示缩写或首字母缩写词的单词（例如 “URL” 或 “NATO”）应该具有一致的大小写。例如，”URL” 应该出现为 “URL” 或 “url”（例如 “urlPony” 或 “URLPony”），而不应该出现为 “Url”。例如：ServeHTTP 而不是 ServeHttp。对于有多个首字母缩写词的标识符，例如 “xmlHTTPRequest” 或 “XMLHTTPRequest”。</p>
<p>当 “ID” 缩写代表 “identifier” 时（除了 “id” 代表 “自我”、”超我” 等的情况），此规则也适用，因此应该写成 “appID” 而不是 “appId”。</p>
<p>由协议缓冲区编译器生成的代码不受此规则的约束。人工编写的代码应该比机器生成的代码更加严格。</p>
<h4 id="Interfaces"><a href="#Interfaces" class="headerlink" title="Interfaces"></a>Interfaces</h4><p>通常情况下，<strong>Go 接口应该属于使用接口类型值的包，而不是实现这些值的包</strong>。实现包应该返回具体的类型（通常是指针或结构体类型）：这样就可以在不需要进行大量重构的情况下向实现中添加新的方法。</p>
<p><strong>不要在 API 的实现方定义接口</strong> “用于模拟”；相反，设计 API 使得可以使用真实实现的公共 API 进行测试。</p>
<p><strong>不要在使用前定义接口</strong>：如果没有实际的使用示例，那么很难判断是否需要接口，更不用说需要包含哪些方法了。</p>
<p>也就是说，实现package中用具体类型，使用时用接口。</p>
<h4 id="Line-Length"><a href="#Line-Length" class="headerlink" title="Line Length"></a>Line Length</h4><p>在 Go 代码中没有严格的行长度限制，但应避免过长的行。同样地，不要添加换行符来保持行的短小，如果它们长而更易读的话，例如重复的代码。</p>
<p>大多数情况下，当人们在函数调用或函数声明的中间 “不自然” 地换行时，如果它们有合理数量的参数和合理长度的变量名，这种换行是不必要的。长行似乎与长变量名有关，<strong>去掉长变量名</strong>可以起到很大的帮助作用。</p>
<p>换句话说，根据你<strong>正在编写的语义换行</strong>（作为一般规则），而不是因为行的长度。如果发现这导致行太长，那么改变名称或语义可能会得到一个好结果。</p>
<p>实际上，这正是有关函数长度的建议。没有规则 “永远不要让函数超过 N 行”，但肯定有过长的函数和过于重复的微小函数，解决方法是<strong>改变函数边界的位置</strong>，而不是开始计算行数。</p>
<h4 id="Named-Result-Parameters"><a href="#Named-Result-Parameters" class="headerlink" title="Named Result Parameters"></a>Named Result Parameters</h4><p>在编写 godoc 时要考虑函数的外观。有些情况，有名的结果参数会显得重复：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *Node)</span></span> Parent2() (node *Node, err <span class="type">error</span>) &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>最好使用：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *Node)</span></span> Parent2() (*Node, <span class="type">error</span>) &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>然而，如果一个函数返回两个或三个相同类型的参数，或者如果结果的含义从上下文中不清楚，添加名称在某些情况下可能是有用的。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f *Foo)</span></span> Location() (<span class="type">float64</span>, <span class="type">float64</span>, <span class="type">error</span>)</span><br></pre></td></tr></table></figure>

<p>最好使用：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Location 返回 f 的纬度和经度。</span></span><br><span class="line"><span class="comment">// 负值分别表示南纬和西经。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f *Foo)</span></span> Location() (lat, long <span class="type">float64</span>, err <span class="type">error</span>)</span><br></pre></td></tr></table></figure>

<h4 id="Naked-Returns"><a href="#Naked-Returns" class="headerlink" title="Naked Returns"></a>Naked Returns</h4><p>一个不带参数的返回语句会返回命名的返回值。这被称为 “裸返回”。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">split</span><span class="params">(sum <span class="type">int</span>)</span></span> (x, y <span class="type">int</span>) &#123;</span><br><span class="line">	x = sum * <span class="number">4</span> / <span class="number">9</span></span><br><span class="line">	y = sum - x</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Package-Comments"><a href="#Package-Comments" class="headerlink" title="Package Comments"></a>Package Comments</h4><p>包注释，就像所有要在 godoc 中显示的注释一样，必须紧邻着包声明语句出现，不能有空行。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Package math provides basic constants and mathematical functions.</span></span><br><span class="line"><span class="keyword">package</span> math</span><br></pre></td></tr></table></figure>

<h4 id="Package-Names"><a href="#Package-Names" class="headerlink" title="Package Names"></a>Package Names</h4><p>在你的包中，<strong>所有对名称的引用都将使用包名，因此你可以省略标识符中的包名</strong>。例如，如果你在包 chubby 中，你不需要定义类型 ChubbyFile，客户端将会写成 chubby.ChubbyFile。相反，可以将该类型命名为 File，客户端将会写成 chubby.File。避免使用毫无意义的包名，如 util、common、misc、api、types 和 interfaces。更多信息请参见 <a href="https://go.dev/doc/effective_go#package-names">https://go.dev/doc/effective_go#package-names</a> 和 <a href="https://go.dev/blog/package-names%E3%80%82">https://go.dev/blog/package-names。</a></p>
<h4 id="Pass-Values"><a href="#Pass-Values" class="headerlink" title="Pass Values"></a>Pass Values</h4><p><strong>不要仅仅为了节省几个字节而将指针作为函数参数传递</strong>。如果一个函数只是通过 <code>*x</code> 来引用它的参数 <code>x</code>，那么该参数就不应该是一个指针。这种情况的常见实例包括传递一个字符串的指针 (<code>*string</code>) 或一个接口值的指针 (<code>*io.Reader</code>)。<strong>在这两种情况下，值本身是固定大小的，可以直接传递</strong>。<strong>这个建议不适用于大的结构体，甚至是可能增长的小的结构体</strong>。</p>
<p>也就是说，推荐使用值传递。</p>
<h4 id="Receiver-Names"><a href="#Receiver-Names" class="headerlink" title="Receiver Names"></a>Receiver Names</h4><p>方法的接收者的名称应该<strong>反映其身份</strong>；通常一个类型的一个或两个字母的缩写就足够了（例如 “c” 或 “cl” 表示 “Client”）。不要使用通用名称，如 “me”、”this” 或 “self”，这些标识符是面向对象语言的典型标识符，给方法赋予了特殊的含义。<strong>在 Go 中</strong>，<strong>方法的接收者只是另一个参数，因此应该相应地命名</strong>。接收者的名称不必像方法参数那样具有描述性，因为它的作用是显而易见的，没有文档目的。名称可以非常短，因为它将出现在类型的每个方法的几乎每一行代码中；熟悉可以缩短长度。也要保持一致：如果在一个方法中将接收者称为 “c”，则在另一个方法中不要将其称为 “cl”。</p>
<h4 id="Receiver-Type"><a href="#Receiver-Type" class="headerlink" title="Receiver Type"></a>Receiver Type</h4><p>对于方法<strong>是否使用值接收者或指针接收者的选择可能很困难</strong>，尤其<strong>对于新手来说。如果不确定，使用指针</strong>，但有时候值接收者更加合理，通常是出于效率的原因，例如对于小的不可变结构体或基本类型的值。以下是一些有用的指南：</p>
<ul>
<li>如果接收者是 map、func 或 chan，不要使用它们的指针。如果接收者是 slice，并且方法不会重新分配或重新分片 slice，则不要使用它的指针。</li>
<li>如果方法<strong>需要修改接收者，接收者必须是指针</strong>。</li>
<li>如果接收者是<strong>包含 sync.Mutex 或类似同步字段的结构体，则接收者必须是指针</strong>，以避免复制。</li>
<li>如果接收者是大型结构体或数组，则指针接收者更有效率。多大才算大？假设它相当于将所有元素作为参数传递给方法。如果感觉太大了，接收者也太大了。</li>
<li>函数或方法是否可以在并发时或从此方法调用时修改接收者？值类型在调用方法时创建接收者的副本，因此外部更新不会应用于此接收者。如果必须在原始接收者中看到更改，则接收者必须是指针。</li>
<li>如果接收者是结构体、数组或切片，并且其中任何一个元素是指向可能<strong>发生变化</strong>的东西的指针，那么最好使用指针接收者，因为这将使意图更清晰。</li>
<li>如果接收者是一个小的数组或结构体，自然是一个值类型（例如 time.Time 类型），没有可变的字段和指针，或者只是一个简单的基本类型，如 int 或 string，则值接收者是有意义的。<strong>值接收者可以减少可能产生的垃圾量；如果将一个值传递给值方法，则可以使用栈上的副本而不是在堆上分配。</strong>编译器试图聪明地避免这种分配，但不总是成功。<strong>不要在没有进行性能分析的情况下出于这个原因选择值接收者类型</strong>。</li>
<li><strong>不要混合使用接收者类型</strong>。对所有可用方法选择指针或结构体类型。</li>
<li>最后，<strong>如果不确定，请使用指针接收者</strong>。</li>
</ul>
<h4 id="Synchronous-Functions"><a href="#Synchronous-Functions" class="headerlink" title="Synchronous Functions"></a>Synchronous Functions</h4><p>建议优先选择<strong>同步函数</strong> - 即在返回结果之前直接返回或完成任何回调或通道操作的函数。</p>
<p>同步函数可以将 goroutine <strong>限定在一个调用中，使得更容易理解它们的生命周期并避免泄漏和数据竞争</strong>。它们也更容易进行测试：调用者可以传递输入并检查输出，<strong>而无需进行轮询或同步</strong>。</p>
<p>如果<strong>调用者需要更多并发性</strong>，他们可以轻松地通过<strong>从单独的 goroutine 中调用该函数</strong>来实现。但是，在调用者端删除不必要的并发性通常是相当困难甚至不可能的。</p>
<p>也就是说，函数尽量写成同步的，调用时可以方便的控制并发量。</p>
<h4 id="Useful-Test-Failures"><a href="#Useful-Test-Failures" class="headerlink" title="Useful Test Failures"></a>Useful Test Failures</h4><p>测试应该以有用的错误信息失败，说明出了什么问题，使用了什么输入，实际得到了什么，期望得到了什么。可能会想编写一堆 assertFoo 辅助函数，<strong>但要确保这些函数产生有用的错误信息</strong>。假设调试失败的测试的人不是你，也不是你的团队。一个典型的 Go 测试失败如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> got != tt.want &#123;</span><br><span class="line">	t.Errorf(<span class="string">&quot;Foo(%q) = %d; want %d&quot;</span>, tt.in, got, tt.want) <span class="comment">// 或者使用 Fatalf，如果测试不能测试此点以外的任何内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>请注意，这里的顺序是<strong>实际结果 !&#x3D; 期望结果</strong>，错误消息也使用该顺序。一些测试框架鼓励将它们写反：0 !&#x3D; x，”期望得到 0，实际得到 x”等等。但 Go 不是这样的。</p>
<p>如果感觉这样打字太多了，可以考虑编写<strong>表驱动测试</strong>。</p>
<p>另一种常见的技术是在使用不同输入的测试助手时，使用不同的 TestFoo 函数包装每个调用，这样测试失败时会显示该名称：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSingleValue</span><span class="params">(t *testing.T)</span></span> &#123; testHelper(t, []<span class="type">int</span>&#123;<span class="number">80</span>&#125;) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestNoValues</span><span class="params">(t *testing.T)</span></span> &#123; testHelper(t, []<span class="type">int</span>&#123;&#125;) &#125;</span><br></pre></td></tr></table></figure>


<p>无论如何，你需要为将来调试你的代码的人<strong>提供有用的失败信息</strong>。</p>
<h4 id="Variable-Names"><a href="#Variable-Names" class="headerlink" title="Variable Names"></a>Variable Names</h4><p>Go 中的变量名应该是简短的而不是长的。这对于具有<strong>有限作用域的局部变量</strong>尤其如此。应该优先选择 c 而不是 lineCount。应该优先选择 i 而不是 sliceIndex。</p>
<p><strong>基本规则是：距离其声明越远的地方使用的名称，名称越需要详细描述。</strong>对于方法接收器，一个或两个字母就足够了。常见的变量，如循环索引和读取器，可以使用单个字母（i、r）。更不寻常的事物和全局变量需要更详细的名称。</p>
<p>另请参见 <a href="https://google.github.io/styleguide/go/decisions#variable-names">the Google Go Style Guide</a>中的更长讨论。</p>
]]></content>
      <tags>
        <tag>Golang</tag>
        <tag>Learning</tag>
      </tags>
  </entry>
</search>
